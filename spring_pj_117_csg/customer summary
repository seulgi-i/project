 ** 에러 처리

1] jsbc오류
java.sql.SQLException: Cannot load JDBC driver class 'oracle.jdbc.driver.OracleDriver'
==> C:\Program Files\Java\jre1.8.0_241\lib\ext\ojdbc6.jar 붙여넣는다.


그래도 안되면 pom.xml에 추가

   <!-- jdbc 오류 나신분들만 추가  -->
      <dependency> <groupId>com.oracle.database.jdbc</groupId>
         <artifactId>ojdbc6</artifactId> 
         <version>11.2.0.4</version> 
       </dependency>
      
      <dependency> 
            <groupId>commons-dbcp</groupId>
            <artifactId>commons-dbcp</artifactId>
            <version>1.4</version>
       </dependency>
       
----------------------------------------       
2] aopaliance1.1 오류
** aopaliance1.1 오류시 해당 경로에 라이브러리 있는지 확인후 없으면 jar 다운받아서 복사후, 서버 리스타트


<!-- 추가 -->
<dependency>
    <groupId>aopalliance</groupId>
    <artifactId>aopalliance</artifactId>
    <version>1.0</version>
</dependency>
      

** Caused by: java.io.FileNotFoundException: C:\apache-tomcat-8.5.81\wtpwebapps\spring_basic_117\WEB-INF\lib\spring-aop-3.1.1.RELEASE.jar (지정된 파일을 찾을 수 없습니다)

=> 이클립스 껐다 켠다.

----------------------------------------       
3] insert문장 regDate 오류 
=> 서비스 : dto.setRegDate(new Timestamp(System.currentTimeMillis()));
=> mapper에서 sysdate로 주거나 아예 regDate를 빼거나


HomeController.java가 작동안되면 플젝 새로 생성

javaScript 캐쉬가 먹으면 강력 새로고침 또는 이클립스 껐다 키기

///////////////////


1. 커넥션풀 추가

 <Resource author="Container" 
     driverClassName="oracle.jdbc.driver.OracleDriver" 
     maxActive="5" maxWait="1000" 
     name="jdbc/jsp_pj_117" 
     password="tiger"
     type="javax.sql.DataSource" 
     url="jdbc:oracle:thin:@localhost:1521:xe" 
     username="jsp_pj_117"/>
     
-----------------------------------------------------     
2. 플젝 생성 : NEW > Spring Legacy Project > 프로젝트명 입력 > Spring MVC Project 선택 > 패키지(3레벨이상) 입력 : spring.mvc.pj_117
  => 패키지(3레벨이상) 입력해야 하며, 3레벨이 컨텍스트명(pj_117)이 된다. 
  
=> 테스트 => http://localhost/
   home.jsp 실행
   Hello world!

1) 자바 설정
   
   - project 우클릭 > properties > Project Facets > java를 1.8로 변경
   Runtimes 탭에서 Apache Tomcat v8.5 클릭 > Apply 버튼
   
   - project 우클릭 > properties > Java Build Path > Library 탭 > jre System library 선택후 Edit 선택 / 또는 jre System library 더블클릭
   > 세번째 workspace default JRE(jre1.8.0_xxx) 선택
   
   - java compiler - 1.8버전 확인
   
   
2) pom.xml에 버전 반영
   <properties>
      <java-version>1.8</java-version>
      <org.springframework-version>5.1.8.RELEASE</org.springframework-version>      
      
3) 실행 : 
   http://localhost/pj_117/
   => http://localhost/세번째 패키지명/
   
-----------------------------------------------------   
3. 패키지 생성

   spring.mvc.pj_117.controller
   spring.mvc.pj_117.service
   spring.mvc.pj_117.dao
   spring.mvc.pj_117.dto

-----------------------------------------------------   
4. web.xml 맨 아래에 한글 안깨지도록 추가

   <!-- 한글 안깨지게 처리 시작 -->
   <filter>
      <filter-name>encodingFilter</filter-name>
      <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
      
      <init-param>
         <param-name>encoding</param-name>
         <param-value>UTF-8</param-value>
      </init-param>   
      
      <init-param>
         <param-name>forceEncoding</param-name>
         <param-value>true</param-value>
      </init-param>
   </filter>
   
   <filter-mapping>
      <filter-name>encodingFilter</filter-name>
      <url-pattern>/*</url-pattern>
   </filter-mapping>
   <!-- 한글 안깨지게 처리 종료 -->

확인 => http://localhost/pj_117/
   Hello world!
   The time on the server is 2022년 3월 8일 (화) 오전 11시 02분 52초.
   
-----------------------------------------------------   
5. pom.xml에 Mybatis.jar 파일 설정
   
   mvnrepository.com에서 4개의 라이브러리를 복사후 pom.xml에 등록하면
   maven 중앙 repository(저장소)로부터 다운로드 후 빌드되어 Maven Dependencies(.m2.repository)에 저장된다.
   
    <!-- Mybatis 설정 시작 -->
   <dependency>
       <groupId>org.mybatis</groupId>
       <artifactId>mybatis-spring</artifactId>
       <version>1.3.2</version>
   </dependency>
      
   <dependency>
       <groupId>org.mybatis</groupId>
       <artifactId>mybatis</artifactId>
       <version>3.4.6</version>
   </dependency>
   
   <dependency>
       <groupId>org.springframework</groupId>
       <artifactId>spring-jdbc</artifactId>
       <version>5.1.8.RELEASE</version>
   </dependency>
   <!-- Mybatis 설정 끝 -->
   
   --spring-test
   
 6. jsp의 CustomerController open
 
    
    - 해당 경로에 Customer 파일 복사해서 가져온다.    
   	스프링 
    CustomerController 소스 만들고 작성
    CustomerService, CustomerServiceImpl 복사해서 가져온다.
    CustomerDTO 복사해서 가져온다.
    CustomerDAO, CustomerDAOImpl 복사해서 가져온다.
    
    - jsp : common폴더 / customer 폴더 => 복사해서 views 폴더에 붙여넣는다.
      jsp : resources => 복사해서 resources 폴더에 붙여넣는다.
      
 ==> 스프링으로 변환   (jsp는 경로만 수정, 백엔드(클래스는 어노테이션 처리, DAO는 마이바티스로 작성후 호출))  
 
 
 6-1) main.do
     @Controller
   public class CustomerController {
      
      private static final Logger logger = LoggerFactory.getLogger(CustomerController.class);
      
      @RequestMapping("main.do")
      public String main() {
         logger.info("[url ==> /main.do]");
         
         return "common/main";
      }
   }
   
   --
   main.jsp는 그대로
   
3)   
 - views/common/header.jsp => 링크 수정 => jsp_pj_117 => ${path}
<ul class="navbar_icons">  
		      	 <li><i class="fa fa-twitter"></i></li>
		         <li><i class="fa fa-facebook"></i></li>
		         
      <!--  로그인 안 한 경우-->
				<c:if test="${sessionScope.customerID == null }">
		         <li><a href="${path}/login.do">LOGIN</a></li>
		         <li><a href="${path}/join.do">JOIN</a></li>
		         <li><a href="${path}/login.do"><i class="fa fa-cart-plus"></i></a></li>
		         <li><a href="${path}/login.do"><i class="fa fa-user"></i></a></li>
				</c:if>
			
		      <!--  로그인 한 경우-->
		      <c:if test="${sessionScope.customerID != null }">
		      	 <li><span style="color:pink">${sessionScope.cusomerID}</span>님 환영합니다.</li>
		         <li><a href="${path}/logout.do">LOGOUT</a></li>
		         <li><a href="${path}/cartList.do"><i class="fa fa-cart-plus"></i></a></li> <!--장바구니상세페이지  -->
		         <li><a href="${path}/deleteCustomer.do"><i class="fa fa-user"></i></a></li><!--  마이페이지 : 회원탈퇴 -->
		      </ul>
			</c:if>     
	</ul>
 
 4)webapp/resources / js/customerJS/join.js => 링크 수정
 var url = "/pj_117/confirmIdAction.do?id=" + document.joinform.id.value;
  
  5) jsp 경로 수정
  <%@ include file ="/WEB-INF/views/common/setting.jsp"%> 
  <%@ include file="/WEB-INF/views/common/header.jsp" %>
  <%@ include file="/WEB-INF/views/common/footer.jsp" %>
  	
     6) modifyDetailAcion.jsp 경로수정
   <%@ page import="spring.mvc.pj_117.dto.CustomerDTO" %>
   
   
   
   
=>    실행  http://localhost/pj_117/main.do   => 정상 실행
    * CustomerController_old.java는 삭제 => 컴파일 오류
    

   6-2) join.do
   
      컨트롤러
   //--------------- [회원가입] -----------------   
   // 회원가입화면
   @RequestMapping("join.do")
   public String join() {
      logger.info("[url ==> confirmIdAction.do]");
      
      return "customer/join/join";
   }
   --
   join.jsp 
   
   => 경로 수정  : /WEB-INF/views 추가
   
   <%@ include file="/WEB-INF/views/common/setting.jsp" %>
   <%@ include file="/WEB-INF/views/common/header.jsp" %>   
   <%@ include file="/WEB-INF/views/common/footer.jsp" %> 
    
    
    6-3) 컨트롤러, 서비스, DAO에 어노테이션 추가
      패키지 오류 먼저 수정(jsp패키지와 스프링 패키지가 다르므로)후 어노테이션 추가
    
    @Controller
   public class CustomerController {
   
      @Autowired
      CustomerServiceImpl service;
      
       // 회원가입 처리
	  @RequestMapping("joinAction.do")
	   public String join(HttpServletRequest req, Model model) {
			logger.info("[url ==> /joinAction.do]");
			
			 service.signInAction(req, model);
			 
			return "customer/join/joinAction";
      
      나머지 소스는 주석처리
   }
	   //회원가입 성공
		@RequestMapping("mainSuccess.do")
		public String mainSuccess(HttpServletRequest req, Model model) {
			logger.info("[url => mainSuccess.do]");
			
			//mainSuccess.do?insertCnt=" +insertCnt ;
			int cnt = Integer.parseInt(req.getParameter("insertCnt"));
	        model.addAttribute("cnt", cnt);
	        
			return "customer/login/login";
	}
    //CustomerServiceImpl  복사해서 붙여넣는다. 해당부분 제외하고 나머지 주석처리
    
    @Service
   public class CustomerServiceImpl implements CustomerService {
   
      @Autowired
      CustomerDAO dao;
      
      // 회원가입 처리
	   @Override
	   public void signInAction(HttpServletRequest req, Model model) {
	      System.out.println("서비스 => 회원가입 처리");
	      
            model.addAttribute("insertCnt", insertCnt);
  
      나머지 소스는 주석처리
   }   
   
   @Repository
   public class CustomerDAOImpl implements CustomerDAO {
      // 6-5)
      @Autowired
      SqlSession sqlSession;
      
      나머지 소스는 주석처리
   }
   
   ********
   6-4) src/main/resources/dataSource-config.xml 작성
       => web.xml에 등록해야 함 
       <context-param>
         <param-name>contextConfigLocation</param-name>
         <param-value>
                  classpath:/dataSource-config.xml  <!-- 추가해야 작동  -->
         </param-value>
      </context-param>
      
      
      --------
      소스 작성 dataSource-config.xml
      <!-- Mybatis 설정 시작 -->
      <!-- 컨넥션풀 -->
      <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
         <property name="jndiName" value="java:comp/env/jdbc/pj_117" />
         <property name="resourceRef" value="true" />
      </bean>
      
      <!-- Mybatis 파일 위치 지정, 컨넥션풀 -->
      <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
         <property name="dataSource" ref="dataSource" />
         <property name="mapperLocations" value="classpath:mappers/**/*.xml" />  
      </bean>
      
      <!-- 생성자 DI이며, sqlSession이 참조변수 -->
      <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
         <constructor-arg ref="sqlSessionFactory" />
      </bean>
      
      <!-- Mybatis 설정 종료 -->
   
   6-5) DAOImpl에 sqlSession 추가
   
   // Mybatis jar 파일들이 pom.xml에 등록되어 있어야 SqlSession이 import 가능
   // dataSource-config.xml에 bean id="sqlSession"로 설정되어 있어야 함
   
   @Autowired
   SqlSession sqlSession;   
   
   6-6) 마이바티스 매퍼 파일 작성
   
      => 1. 한두줄의 자바코드로 DB연동을 처리한다
         2. SQL 명령어를 자바 코드에서 분리하여 XML 파일에 Mapper로 따로 관리
         
      - src/main/resources/에서 폴더 생성 : mappers 폴더 생성
      - 그 폴더 우클릭 > new > other > xml file > customerMapper.xml 생성
      -  customerMapper.xml에 추가
      <?xml version="1.0" encoding="UTF-8"?>

-- 아래 문법
   <!DOCTYPE mapper
     PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
     "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
     
    <mapper namespace="spring.mvc.pj_117.dao.CustomerDAO">  <!-- namespace="패키지명.인터페이스" -->
   
    </mapper> 
   ********
   
   실행 : main.do -> 회원가입
   
   
-------------------------------------------------------------------------------------------
[중복확인]
   컨트롤러 > 중복확인
   서비스 >    중복확인
   DAO > 중복확인
   mapper 중복확인
   DAOImpl > 중복확인
   
[회원가입]   
   
   컨트롤러 > 회원가입
   서비스 >    회원가입
   DAO > 회원가입
   mapper 회원가입
   DAOImpl > 회원가입

[회원수정]   
[회원회원삭제]

    
 -------------------------------------------------------------------------------------------   
   
        