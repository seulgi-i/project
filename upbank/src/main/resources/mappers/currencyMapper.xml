<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
     PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
     "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
     
<mapper namespace="com.mvc.upbank.dao.CurrencyDAO">
<!-- namespace="패키지명.인터페이스" -->

	
	<!-- 
   1. <mapper namespace="패키지명.인터페이스명">
   
   2. <id="인터페이스의 메서드명">는 유일해야 하며, 인터페이스의 메서드명을 사용한다.
      따라서 인터페이스 메서드 갯수만큼 Mapper도 작성해야 한다.
   
   3. select 문장은 반드시 resultType을 기술해야 한다.
      주의사항 : select 문장의 resultType이 int형이면 "SELECT * " ==> "SELECT COUNT(*) "로 바꾼다.
   
   4. insert, update, delete 구문은 <insert><update><delete> 엘리먼트를 사용하며, parameterType이 필수이다.
      resultType은 int형이며, 마이바티스가 알아서 성공, 실패 여부의 결과값을 넘긴다.
   
   5. parameterType, resultType이 클래스타입인 경우 패키지명.클래스명을 기술한다.
   
   6. 문장의 끝에 ';'을 붙이지 않는다.
   
   7. 주의사항 : 파라미터 일반변수명은 #{변수명}으로 기술하며, 메서드의 매개변수명과 반드시 일치해야 한다. 예) id=#{strId}
   
   8. 파라미터 값이 2개이상일 때는 parameterType을 java.util.Map 또는 VO로 받는다.
      주의사항 : Map에 추가(put)된 키명와 #{변수명}은 반드시 일치해야 한다.
   
   9. preparedStatement의 '?' 대신에 pstmt에서 set한 변수명이 온다. ==> #{변수명}
	-->
	
	<!-- 환율 테이블 -->
	
	<!-- 날짜별 환율정보 인서트 -->
	<insert id="CurrencyInsert" parameterType="com.mvc.upbank.dto.CurrencyDTO">
		INSERT INTO CURRENCY_INFO(num, cur_nm, cur_unit, ttb, tts, deal_bas_r, bkpr, CUR_DATE)
		VALUES((SELECT NVL(MAX(num) + 1, 1) FROM CURRENCY_INFO), #{cur_nm}, #{cur_unit}, #{ttb}, #{tts}, #{deal_bas_r}, #{bkpr}, #{CUR_DATE})
	</insert>
	
	<!-- 날짜별 환율정보 조회 -->
	<select id="CurrencySelect" parameterType="String" resultType="com.mvc.upbank.dto.CurrencyDTO">
		SELECT *
		 FROM (SELECT * FROM CURRENCY_INFO ORDER BY CUR_DATE desc)
			WHERE CUR_DATE = #{CUR_DATE} 
	</select>
	
	<!-- 날짜별 환율정보 등록여부(등록된 그날의 환율갯수를 리턴) -->
	<select id="CurrencySelectDate" parameterType="String" resultType="int">
		SELECT COUNT(*)
		 FROM (SELECT * FROM CURRENCY_INFO ORDER BY CUR_DATE desc)
			WHERE CUR_DATE = #{CUR_DATE} 
	</select>
	
	<!-- 날짜별 환율계산기 환율리턴 -->
	<select id="CurrencyCalc" parameterType="String" resultType="double">
		SELECT NVL(max(DEAL_BAS_R), 0)  FROM CURRENCY_INFO
			WHERE CUR_UNIT = #{CUR_UNIT} AND CUR_DATE = TO_CHAR(SYSDATE, 'YYYY-MM-DD')
	</select>
	
<!-- 환전 테이블 -->
	<!-- 환전 정보 인서트 -->
	<insert id="CurrencyExcInsert" parameterType="com.mvc.upbank.dto.CurExchangeDTO">
		INSERT INTO CUREXCHANGE_INFO(num, name, ACCOUNT, usercp, email, reason, receive_date, receive_spot1, receive_spot2, receive_spot3, submit_date, account_pw, cur_exchange)
		VALUES((SELECT NVL(MAX(num) + 1, 1) FROM CUREXCHANGE_INFO), #{name}, #{ACCOUNT}, #{usercp}, #{email}, #{reason}, #{receive_date}, #{receive_spot1}, #{receive_spot2}, #{receive_spot3}, #{submit_date}, #{account_pw}, #{cur_exchange})
	</insert>
	
	<!-- 환전정보 등록여부(등록된 총 환전신청정보 갯수를 리턴) -->
	<select id="CurrencyExcSearchCnt" parameterType="String" resultType="int">
		SELECT COUNT(*)
		 FROM (SELECT * FROM CUREXCHANGE_INFO ORDER BY receive_date desc)
			WHERE usercp = #{usercp} 
	</select>
	
	<!-- 휴대폰별 환전신청한 데이터 조회 -->
	<select id="CurrencyExchangeSearch" parameterType="String" resultType="com.mvc.upbank.dto.CurExchangeDTO">
		SELECT *
		 FROM (SELECT * FROM CUREXCHANGE_INFO ORDER BY receive_date desc)
			WHERE usercp = #{usercp} 
	</select>
	
	<!-- 관리자단의 환전 수령여부 업데이트-->
	<update id="CurrencyExchangeAdmin" parameterType="int" >
  		UPDATE CUREXCHANGE_INFO SET enable = 0 WHERE num = #{num}
   	</update>
	
	
</mapper>